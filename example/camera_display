#!/usr/bin/python3
from queue import Full
from PIL import Image
import actfw_core
from actfw_jetson import Display, NVArgusCameraCapture
from actfw_core.task import Pipe, Consumer, Producer
from actfw_core.capture import Frame


(CAPTURE_WIDTH, CAPTURE_HEIGHT) = (1280, 720)
FPS = 120


class Presenter(Consumer):

    def __init__(self, settings, cmd):
        super(Presenter, self).__init__()
        self.settings = settings
        self.cmd = cmd
        if self.settings['display']:
            self.display = Display((CAPTURE_WIDTH, CAPTURE_HEIGHT), FPS)

    def proc(self, frame):
        image = Image.frombuffer('RGB', (CAPTURE_WIDTH, CAPTURE_HEIGHT), frame.getvalue(), 'raw', 'RGB')
        self.cmd.update_image(image)  # update `Take Photo` image
        actfw_core.notify([{'test': True}])
        actfw_core.heartbeat()
        if self.settings['display']:
            self.display.update(image)

    def stop(self):
        self.display.stop()
        super(Presenter, self).stop()


def main():

    # Actcast application
    app = actfw_core.Application()

    # Load act setting
    settings = app.get_settings({'display': True})

    # CommandServer (for `Take Photo` command)
    cmd = actfw_core.CommandServer()
    app.register_task(cmd)

    # Capture task
    cap = NVArgusCameraCapture((CAPTURE_WIDTH, CAPTURE_HEIGHT), FPS)
    app.register_task(cap)

    # Presenter task
    pres = Presenter(settings, cmd)
    app.register_task(pres)

    # Make task connection
    cap.connect(pres)

    # Start application
    app.run()


if __name__ == '__main__':
    import gi
    gi.require_version('Gst', '1.0')
    from gi.repository import Gst, GObject
    Gst.init(None)

    main()
